#!/usr/bin/env node
const debug = require('debug')('chess:server');
const fs = require('fs');
const http = require('http');
const socketIO = require('socket.io');

const app = require('../app');
const models = require('../app/models');

/**
 * Setup environment variables.
 */
require('./loadEnvs');

const isProduction = (app.get('env') === 'production');

/**
 * Get port from environment and store in Express.
 */
const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Initialize Socket.io middleware.
 */
const io = socketIO(server);

io.on('connect', (/* client */) => {
  // do something
});


/**
 * Listen on provided port, on all network interfaces.
 */
app.once('ready', () => {
  server.listen(PORT);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Database health check.
 */
if (isProduction) {
  models.connection
    .authenticate()
    .then(() => app.emit('ready'))
    .catch(onError);
} else {
  models.connection
    .sync()
    .then(() => app.emit('ready'))
    .catch(onError);
}

/**
 * Normalize a port into a number, string, or false.
 * @param {string} val The port to be normalized.
 * @returns {boolean|number} The normalized port number or `false`.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error}
 * @throws {Error}
 */
function onError(err) {
  if (err.syscall !== 'listen') {
    throw err;
  }

  const bind = typeof PORT === 'string'
    ? `Pipe ${PORT}`
    : `Port ${PORT}`;

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw err;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = (typeof addr === 'string')
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}


process.on('unhandledRejection', (reason) => {
  console.error('Unhandled Rejection at:', reason.stack || reason);

  if (reason.name === 'SequelizeConnectionRefusedError') {
    process.exit(666);
  }
});

process.on('uncaughtException', (err) => {
  fs.writeSync(1, `Caugh exception: ${err}\n`);
  process.exit(1);
});
