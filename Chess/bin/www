#!/usr/bin/env node
require('../config/bootstrap');

const http = require('http');
const socketIO = require('socket.io');

const app = require('../app');
const models = require('../app/models');

const log = logger('server');

const isProduction = (app.get('env') === 'production');

/**
 * Get port from environment and store in Express.
 */
const PORT = normalizePort(process.env.PORT || '4567');
app.set('port', PORT);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Initialize Socket.io middleware.
 */
const io = socketIO(server);

/*
io.use((socket, next) => {
  const matchId = socket.handshake.headers['x-matchid'];
  // eslint-disable-next-line no-param-reassign
  socket.matchId = matchId;
  return next();
});
*/

/**
 * Eventos
 * - game
 * -> send-move
 * -> receive-move
 * - status
 * -> ready
 */


const onSendMove = (socket, actionMove) => {
  const matchId = socket.handshake.headers['x-matchid'];
  socket.broadcast.emit('game:receive-move', actionMove);

  const newPartidaValues = {
    fen: actionMove.position,
  };

  if (actionMove.match.isOver) {
    log('fim do jogo!!', matchId);
    // newPartidaValues.winner = actionMove.match.inDraw ? -1 :
    // TODO: definir o id do vencedor, sendo -1 indicando empate
  }

  // TODO: move to a background job (vide https://youtu.be/uonKHztGhko)
  /*
  models.Partida.update(newPartidaValues, {
    where: { id: matchId },
  });
  */
};


const ack = (socket) => {
  const matchId = socket.handshake.headers['x-matchid'];
  socket.on('game:send-move', onSendMove.bind(null, socket));
  socket.emit('status:ready', matchId);
};

io.on('connect', (socket) => {
  const matchId = socket.handshake.headers['x-matchid'];
  log(`usuario '${socket.id}' conectado na partida ${matchId}`);

  if (!matchId) { // AKA "nÃ£o-autenticado"
    return;
  }

  ack(socket);
});


/**
 * Listen on provided port, on all network interfaces.
 */
app.once('ready', () => {
  server.listen(PORT);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Database health check.
 */
if (isProduction) {
  models.connection
    .authenticate()
    .then(() => app.emit('ready'))
    .catch(onError);
} else {
  models.connection
    .sync()
    .then(() => app.emit('ready'))
    .catch(onError);
}

/**
 * Normalize a port into a number, string, or false.
 * @param {string} val The port to be normalized.
 * @returns {boolean|number} The normalized port number or `false`.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error}
 * @throws {Error}
 */
function onError(err) {
  if (err.syscall !== 'listen') {
    throw err;
  }

  const bind = typeof PORT === 'string'
    ? `Pipe ${PORT}`
    : `Port ${PORT}`;

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case 'EACCES':
      log.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw err;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = (typeof addr === 'string')
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  log(`Listening on ${bind}`);
}
