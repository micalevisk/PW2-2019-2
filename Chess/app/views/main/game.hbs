<div class="main__game container clearfix">

  <div class="large-board">
    <div id="board"></div>
    <div class="pt-1 text-center">
      {{#unless match.waitingOpponent}}
      <div id="status" class="game-status"></div>
      {{/unless}}
      <div class="opponents">
        {{#if match.waitingOpponent}}
        <span class="text-white text-capitalize">aguardando oponente&hellip;</span>
        {{else}}
        <span class="piece-{{getOwnerPieceColor match.author_color}}"><i class="fas fa-chess-king"></i></span>
        <span id="user-{{match.userOwner.id}}" class="text-white text-capitalize">&nbsp;{{match.userOwner.name}}</span>
        &times;
        <span id="user-{{match.userOpponent.id}}"
          class="text-white text-capitalize">{{match.userOpponent.name}}&nbsp;</span>
        <span class="piece-{{getOpponentPieceColor match.author_color}}"><i class="fas fa-chess-king"></i></span>
        {{/if}}
      </div>
    </div>
  </div>

  <div class="chat">
    <div id="chat-history">
      <ul id="messages"></ul> {{!-- NOTE: as mensagens não serão renderizadas pelo server. --}}
    </div>
    <div class="chat-message clearfix">
      <textarea name="message-to-send" id="message-to-send" placeholder="Escreva sua mensagem" rows="3"></textarea>
      <button id="send-message" disabled>Enviar</button>
    </div>
  </div>

</div>

{{#if match.waitingOpponent}}
<audio preload="auto" autoplay loop>
  <source src="https://www.chess.com/bundles/web/sounds/countdown-2-15.mp3" type="audio/mpeg"></audio>
{{else}}
{{#if match.hasWinner}}
<audio preload="auto" autoplay>
  <source src="https://www.chess.com/bundles/web/sounds/webm/game-end.webm" type="audio/webm">
  <source src="https://www.chess.com/bundles/web/sounds/ogg/game-end.ogg" type="audio/ogg">
  <source src="https://www.chess.com/bundles/web/sounds/mp3/game-end.mp3" type="audio/mpeg">
  <source src="https://www.chess.com/bundles/web/sounds/wav/game-end.wav" type="audio/wav"></audio>
{{else}}
<div id="game-audios" style="display: none;">

  <audio preload="auto" data-fn="gameStart">
    <source src="https://www.chess.com/bundles/web/sounds/webm/game-start.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/game-start.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/game-start.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/game-start.wav" type="audio/wav"></audio>

  <audio preload="auto" data-fn="moveSelf">
    <source src="https://www.chess.com/bundles/web/sounds/webm/move-self.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/move-self.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/move-self.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/move-self.wav" type="audio/wav"></audio>

  <audio preload="auto" data-fn="moveCheck">
    <source src="https://www.chess.com/bundles/web/sounds/webm/move-check.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/move-check.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/move-check.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/move-check.wav" type="audio/wav"></audio>


  <audio preload="auto" data-fn="moveOpponent">
    <source src="https://www.chess.com/bundles/web/sounds/webm/move-opponent.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/move-opponent.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/move-opponent.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/move-opponent.wav" type="audio/wav"></audio>

  <audio preload="auto" data-fn="capture">
    <source src="https://www.chess.com/bundles/web/sounds/webm/capture.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/capture.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/capture.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/capture.wav" type="audio/wav"></audio>

  <audio preload="auto" data-fn="promote">
    <source src="https://www.chess.com/bundles/web/sounds/webm/promote.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/promote.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/promote.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/promote.wav" type="audio/wav"></audio>

  <audio preload="auto" data-fn="illegal">
    <source src="https://www.chess.com/bundles/web/sounds/webm/illegal.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/illegal.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/illegal.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/illegal.wav" type="audio/wav"></audio>

  <audio preload="auto" data-fn="notify">
    <source src="https://www.chess.com/bundles/web/sounds/webm/notify.webm" type="audio/webm">
    <source src="https://www.chess.com/bundles/web/sounds/ogg/notify.ogg" type="audio/ogg">
    <source src="https://www.chess.com/bundles/web/sounds/mp3/notify.mp3" type="audio/mpeg">
    <source src="https://www.chess.com/bundles/web/sounds/wav/notify.wav" type="audio/wav"></audio>

</div>
{{/if}}
{{/if}}


{{#section 'script'}}

<script type="text/javascript">
  const matchId = '{{match.id}}';

  const socket = io({
    transportOptions: {
      polling: {
        extraHeaders: {
          'x-matchid': matchId,
          'x-uid': '{{userId}}',
          'x-uname': '{{userName}}',
        },
      },
    },
  });
</script>

{{#if match.waitingOpponent}}
<script type="text/javascript">
  socket.on('match:set-opponent', function setOpponent(actionOpponent) {
    if (matchId !== actionOpponent.matchId) return; // TODO: substituir essa lógica por `socket rooms`

    document.location.reload(true); // Reload the current page without use the cache
    // to re-ender the view content.
  });
</script>
{{else}}
{{#if match.userIsOpponent}} {{!-- NOTE: entra aqui também quando a partida está empatada já que não tem winner. --}}
<script type="text/javascript">
  socket.emit('match:new-opponent');
</script>
{{/if}}
{{/if}}

<script src="/js/main/game.js"></script>
<script type="text/javascript">
  startBoardAndGame({
    matchId,
    gameOnHold: JSON.parse('{{match.waitingOpponent}}'),
    position: '{{match.fen}}',
    myColor: '{{match.userColor}}',
    opponentColor: '{{match.opponentColor}}',

    myUserId: '{{userId}}',
    opponentUserId: ('{{userId}}' === '{{match.userOwner.id}}' ? '{{match.userOpponent.id}}' : '{{match.userOwner.id}}'),
  });

  window.startBoardAndGame = null;// Prevent more than one call
</script>

<script type="text/javascript">
  const $chatBox = $('#messages');
  const $btnSendMessage = $('#send-message');


  function renderMessage(messageText, messageDate, senderUid) {
    // TODO: adicionar um LI na UL de chat
    console.info(messageText)

    const senderColor = 'white'; // TODO: recuperar do lookup pelo `senderUid`
    const senderName = 'felipe andre souza'; // TODO: recuperar do lookup pelo `senderUid`
    const messageFormatedDate = '17/11/2019 01:57:51'; // TODO: usar o `messageDate`

    const _messageInfo = `
      <div class="message-info">
        <span class="piece-icon piece-${senderColor}"><i class="fas fa-chess-king"></i></span>
        <span class="username">${senderName}</span>
        <span class="time">${messageDate}</span>
      </div>
    `;

    const _messageText = `
      <div class="message-text text-${senderColor}">${messageText}</div>
    `;

    $chatBox.append()
  }

  socket.on('chat:bulk-messages', function (actionMessages) {
    if (matchId !== actionMessages.matchId) return; // TODO: substituir essa lógica por `socket rooms`

    for (const actionMessage of actionMessages.messages) {
      renderMessage(actionMessage.text, actionMessage.date, actionMessage.userId);
    }
  });

  socket.on('chat:receive-message', function (actionMessage) {
    if (matchId !== actionMessage.matchId) return; // TODO: substituir essa lógica por `socket rooms`

    renderMessage(actionMessage.text, actionMessage.date, actionMessage.userId);
  });

  $btnSendMessage.click(function sendMessage() {
    const actionMessage = {
      text: messageText,// a mensagem em si
      timestamp: Date.now(),// a data de envio no formato UNIX timestamp
      // https://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript
    };

    socket.emit('chat:send-message', actionMessage);
    //renderMessage()
  });


  // =========================================================================
  const pauseGame = () => {
    $btnSendMessage.attr('disabled', true);
  };

  const resumeGame = () => {
    $btnSendMessage.attr('disabled', false);
  };

  const eventsToPauseGame = ['connect_error', 'connect_timeout', 'disconnect'];
  const eventsToResumeGame = ['connect', 'reconnect'];
  eventsToPauseGame.forEach((eventName) => socket.on(eventName, pauseGame));
  eventsToResumeGame.forEach((eventName) => socket.on(eventName, resumeGame));



</script>


{{/section}}
